#!/usr/bin/env perl

# Read one or more TSV/CSV files and then query them with SQLite:
#  csvlite 'select name, age from my_data where age > 30' my_data.csv

use strict;
use warnings;
use Carp;

use IO::All;
use Text::CSV_XS;
use Getopt::Long qw(GetOptions);
use File::Temp qw/ :POSIX /;
use String::Similarity;
use File::Basename;

use DBI;

my $metadata_table_name = "csvlite_metadata";

sub usage
{
  die <<"EOF";
usage: $0 [-d delim] [-q] [-D dsn] [query_string [file [file ...]]]
  OR
usage: $0 [-d delim] [-q] [-D dsn] --load-only [file [file ...]]

summary:
 $0 loads the arguments (TSV or CSV files) into a database using one table per
 file then executes the query_string as an SQL query.

 By default the database is an in-memory SQLite database

options:
  --delim|-d delim   Set the input field delimiter; default: guess using the
                     contents of first line; as a special case "tab" or "TAB"
                     as the <delim> in the command line will be translation to
                     a real tab character
  --dsn|-D dsn|path  Pass an explicit DBI database connect string in the form:
                     'dbi:<driver_name>:<params>', eg. 'dbi:SQLite:temp.sqlite3'
                      - alternatively, if the argument doesn't look like a Perl
                        DSN, assume it's the path to an SQLite database
                        eg. '/tmp/db.sqlite3'
                      - if the SQLite database file doesn't exist it will be
                        created, used, then deleted (but see --persist)
                      - if the database exists it will be used but tables
                        created for processing will be dropped after use
                        unless --persist is passed
  --load-only|-l     Load the files (or STDIN) and exit, without running a query
  --quiet|-q         Suppress all informational messages
  --out-delim delim  Set the output field delimiter; default: use the input
                     delimiter
  --persist|-p       If set, temporary tables and temporary SQLite databases
                     won't be dropped after use.  Additionally an extra table
                     ("$metadata_table_name") will be created.  This table will
                     be used to store the filename, modification date and size
                     of CSV/TSV files.  If the date or size changes the table
                     will be reloaded.  In this mode if there is no -D option,
                     a database called .csvlite_db will be created in the
                     current directory.

notes:
 - The query string should be valid SQL.
 - If no query string is passed, the query is assumed to be:
     "SELECT * from <table1,table2>"
 - If no files are given as arguments, standard input is read.
 - Each file is read into a table whose name is the basename of the file name,
   ie. if the filename is /home/kmr/test.csv the table name will be "test"
 - The input delimiter guessing compares the number of commas and the number of
   tabs in the first line.  The most common of the two is assumed to be the
   delimiter.

examples:
  - $0 'select * from results where score > 10' scores.tsv
    assuming scores.tsv is:
      name<tab>score
      Fred<tab>20
      ...
  - $0 'select score.name,scores.score
EOF
}

# if not set with option, use the delimiter of last input file - used for output
# too
my $delimiter = undef;
my $out_delimiter = undef;
my $dsn = undef;
my $persist = 0;
my $load_only = 0;
my $quiet = 0;

if (!GetOptions('delim|d=s', \$delimiter,
                'out-delim=s', \$out_delimiter,
                'dsn|D=s', \$dsn,
                'persist|p', \$persist,
                'load-only|l', \$load_only,
                'quiet|q' => \$quiet)) {
  usage();
}

if (!defined $dsn) {
  if ($persist) {
    my $default_persist_db = '.csvlite_db';

    if (! -w ".") {
      die qq:can't use default --persist db ("./$default_persist_db") - : .
        "directory not writable\n";
    }

    $dsn = "dbi:SQLite:dbname=$default_persist_db";
  } else {
    $dsn = 'dbi:SQLite:dbname=:memory:';
  }
}

if ($dsn !~ /^dbi:/i) {
  $dsn = "dbi:SQLite:dbname=$dsn";
}

$delimiter = "\t" if defined $delimiter && lc $delimiter eq 'tab';

my $sql_query;

if (!$load_only) {
  $sql_query = shift;

  if (defined $sql_query) {
    if (-e $sql_query) {
      die "$0: $sql_query is a file, the first argument should be an SQL query\n";
    }

    $sql_query =~ s/^\s+//;
    $sql_query =~ s/\s+$//;

    if (length $sql_query == 0) {
      # assume "select * from ..."
      $sql_query = undef;
    }
  }
}

my $dbh = DBI->connect($dsn, '', '');

my %table_info = ();

my $metadata = ();

if ($persist) {
  my $info_sth = $dbh->table_info('%', 'main', $metadata_table_name, 'TABLE');

  if ($info_sth->fetch()) {
    # metadata table exists
    my $query =
      "SELECT table_name, file_name, mod_time, file_size FROM $metadata_table_name;";

    my $sth = $dbh->prepare($query);
    $sth->execute();
    while (my $data = $sth->fetchrow_hashref()) {
      $table_info{$data->{file_name}} = {
        table_name => $data->{table_name},
        mod_time => $data->{mod_time},
        file_size => $data->{file_size},
      };
    }
  } else {
    my $create_sql =
      "CREATE TABLE $metadata_table_name(table_name text, file_name text, mod_time integer, file_size integer)";
    $dbh->prepare($create_sql)->execute();
  }
}

my $some_input_has_header = 0;

# make an identifier that's safe for use as an SQLite table or column name
sub make_identifier
{
  my $identifier = lc shift;
  $identifier =~ s/^\s+//;
  $identifier =~ s/\s+$//;
  $identifier =~ s/[^a-zA-Z_\d]+/_/g;
  return $identifier;
}

sub _clean_line
{
  my $line_ref = shift;

  chomp $$line_ref;
}

sub load_csv
{
  my $file_name = shift;
  my $table_name = shift;

  my $display_file_name;

  if ($file_name eq '-') {
    $display_file_name = 'STDIN';
  } else {
    if (! -e $file_name) {
      die qq("$file_name" doesn't exists\n);
    }

    $display_file_name = $file_name;
  }

  my $io = io($file_name);

  my $first = $io->getline();
  _clean_line(\$first);

  my $second = $io->getline();
  _clean_line(\$second);

  my $csv = Text::CSV_XS->new({ binary => 1 });

  my $delimiter_to_use = undef;

  if (defined $delimiter) {
    $delimiter_to_use = $delimiter;
  } else {
    my $tab_count = ()= $first =~ m/\t/g;
    my $comma_count = ()= $first =~ m/,/g;

    if ($comma_count > $tab_count) {
      $delimiter_to_use = ",";
    } else {
      $delimiter_to_use = "\t";
    }

    $out_delimiter = $delimiter_to_use unless defined $out_delimiter;

    my $display_delimiter;

    if ($delimiter_to_use eq "\t") {
      $display_delimiter = 'TAB';
    } else {
      $display_delimiter = qq("$delimiter_to_use");
    }

    warn qq(assuming $display_delimiter as the delimiter for $display_file_name\n)
      unless $quiet;
  }

  $csv->sep_char($delimiter_to_use);

  my @first_parsed;

  if ($csv->parse($first)) {
    @first_parsed = $csv->fields();
  } else {
    die "parse failure for line ", qq("$first":\n), $csv->error_input(), "\n";
  }

  my @headers;

  my @second_parsed;

  if ($csv->parse($second)) {
    @second_parsed = $csv->fields();
  } else {
    die "parse failure: ", $csv->error_input(), "\n";
  }

  my $similarity =
    similarity(join ("\t", @first_parsed), join ("\t", @second_parsed));

  if (defined $second && $similarity < 0.5) {
    warn "assuming $display_file_name has header line\n"
      unless $quiet;
    @headers = @first_parsed;
    $headers[0] =~ s/^#//;
    # make headers into good sql column names
    map { $_ = make_identifier($_); } @headers;
    @first_parsed = ();
    $some_input_has_header = 1;
  } else {
    warn "assuming input from $display_file_name has no header line, " .
      "using columns names like 'c1', 'c2', ...\n" unless $quiet;
    for (my $i = 1; $i <= @first_parsed; $i++) {
      push @headers, "c$i";
    }
  }

  my $columns_str = join (", ", map { qq("$_" text) } @headers);

  my $temporary_table_str = "TEMPORARY ";

  if ($persist) {
    $temporary_table_str = "";
  }

  my $create_table = 1;

  if ($persist && exists $table_info{$file_name}) {
    my %info = %{$table_info{$file_name}};

    my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$file_size,
        $atime,$file_mod_time,$ctime,$blksize,$blocks)
      = stat($file_name);

    if ($info{mod_time} eq $file_mod_time &&
        $info{file_size} eq $file_size) {
      return;
    } else {
      $create_table = 0;
      my $truncate_table_sql = "DELETE FROM $table_name";
      $dbh->prepare($truncate_table_sql)->execute();

      my $delete_metadata_row_sql =
        "DELETE FROM $metadata_table_name WHERE file_name = ?";

      $dbh->prepare($delete_metadata_row_sql)->execute($file_name);
    }

    my $metadata_insert_sql =
      "INSERT INTO $metadata_table_name(file_name, table_name, mod_time, file_size) " .
        "VALUES (?, ?, ?, ?)";
    my $sth = $dbh->prepare($metadata_insert_sql);
    $sth->execute($file_name, $table_name, $file_mod_time, $file_size);
  }

  if ($create_table) {
    my $create_table_sql = "CREATE ${temporary_table_str}table $table_name ($columns_str)";

    my $sth = $dbh->prepare($create_table_sql);
    if (!defined $sth) {
      die "$0: couldn't create table $table_name: ", $dbh->errstr(), "\n";
    }
    $sth->execute();
  }

  my $add_row_sql = "insert into $table_name values (" .
    join(",", map { "?" } @headers) . ")";
  my $sth = $dbh->prepare($add_row_sql);

  if (@first_parsed) {
    $sth->execute(@first_parsed);
  }

  if (defined $second) {
    if ($csv->parse($second)) {
      $sth->execute($csv->fields());
    } else {
      die "parse failure: ", $csv->error_input(), "\n";
    }

    while (defined (my $line = $io->getline())) {
      _clean_line(\$line);
      if ($csv->parse($line)) {
        my @fields = $csv->fields();
        if (scalar(@fields) != scalar(@headers)) {
          die "not enough fields in line $. of $display_file_name: $line\n";
        }
        $sth->execute(@fields);
      } else {
        warn "failed to parse line: $line - skipping\n";
      }
    }
  }
}

my @table_names = ();

if (@ARGV) {
  for (my $i = 0; $i < @ARGV; $i++) {
    my $table_name = make_identifier(basename($ARGV[$i], '.csv', '.tsv'));
    push @table_names, $table_name;
    load_csv($ARGV[$i], $table_name);
  }
} else {
  my $table_name = 't1';
  push @table_names, $table_name;
  load_csv('-', $table_name);
}

exit 0 if $load_only;

my $all_tables_str = join ',', @table_names;

if (!defined $sql_query) {
  $sql_query = "SELECT * FROM $all_tables_str";
} else {
  my $select_from_re = qr/^\s*select .* from .*/i;

  if ($sql_query !~ $select_from_re) {
    $sql_query = "SELECT * FROM $all_tables_str WHERE $sql_query";
    warn "added missing SELECT ... FROM ... WHERE to query string\n"
    unless $quiet;
  }
}

my $sth = $dbh->prepare($sql_query);
if (!defined $sth) {
  die "$0: preparing query failed: ", $dbh->errstr(), "\n";
}

$sth->execute();

my $out_csv = Text::CSV_XS->new({ eol => "\n" });
$out_csv->sep_char($out_delimiter);

if ($some_input_has_header) {
  # use a header line for output if there was one for input
  warn "using header line for output because an input file had a header line\n"
    unless $quiet;
  my @field_names = @{ $sth->{NAME} };

  $out_csv->print(\*STDOUT, \@field_names);
}

while (my @data = $sth->fetchrow_array()) {
  $out_csv->print(\*STDOUT, \@data);
}
